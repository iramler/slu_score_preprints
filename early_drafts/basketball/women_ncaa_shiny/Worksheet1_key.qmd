---
title: "Worksheet1_key"
format: html
---
A Shiny app is an interactive web application built using the R programming language. It allows users to create dynamic, real-time data visualizations and interfaces with minimal code. Shiny apps are commonly used for data analysis, dashboard creation, and interactive data exploration, enabling users to input data, adjust parameters, and view live updates instantly.

For this activity, we will be focusing on interactive data exploration.

If you haven’t already installed Shiny, install it now with:
```{r}
#delete this line after you run it
install.packages("shiny")
```

Then load in your current R session:
```{r}
library(shiny)
```

Run this code chunk to view your first Shiny app and describe what you see.

Student answers will vary, something along the lines of a webpage with the words, "Hello World" on it.

```{r}
ui <- fluidPage(
  "Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
```

This is a complete, if trivial, Shiny app! Looking closely at the code above, our app does three things:

- It defines the user interface, the HTML webpage that humans interact with. In this case, it’s a page containing the words “Hello, world!”.

- It specifies the behaviour of our app by defining a server function. It’s currently empty, so our app doesn’t do anything, but we’ll be back to revisit this shortly.

- It executes shinyApp(ui, server) to construct and start a Shiny application from UI and server.

Replace your ui with this code and describe what has changed from the initial output:

Again, answers will vary but they should say there's "something" on the webpage instead of the words, and it looks like a dropdown menu for selecting "something". 

```{r}
ui <- fluidPage(
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
  verbatimTextOutput("summary"),
  tableOutput("table")
)
```

This example uses four new functions:

- fluidPage() is a layout function that sets up the basic visual structure of the page. 

- selectInput() is an input control that lets the user interact with the app by providing a value. In this case, it’s a select box with the label “Dataset” and lets you choose one of the built-in datasets that come with R. 

- verbatimTextOutput() and tableOutput() are output controls that tell Shiny where to put rendered output. verbatimTextOutput() displays code and tableOutput() displays tables.

Now, replace your empty server function with this:
Click around on the app and describe what you see/notice.

Student should describe seeing a table with sumary statistics about the data they select in the dropdown menu. 

```{r}
server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}
```

This example uses more new functions:
- input: A list of user inputs from the UI (like dropdown selections or text fields).
- output: A list of reactive outputs to be displayed in the UI (e.g., tables, plots, text).
- renderPrint(): A function used to display printed output (in this case, the summary of a dataset).
- renderTable(): A function used to display a reactive table output.
- get(): Retrieves a dataset from a specific package based on the user's input (from the input$dataset field).
- summary(): Summarizes the dataset (e.g., providing descriptive statistics).
- dataset: A variable that holds the dataset fetched based on the user's input.













